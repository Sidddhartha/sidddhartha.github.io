<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Present Day, Present Time</title>
    <link>https://gobomb.github.io/post/</link>
    <description>Recent content in Posts on Present Day, Present Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Dec 2018 02:08:25 +0800</lastBuildDate>
    
	<atom:link href="https://gobomb.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ngrok 1.X 源码解析(WIP)</title>
      <link>https://gobomb.github.io/post/ngrok-1.x-sourccode-reading/</link>
      <pubDate>Mon, 17 Dec 2018 02:08:25 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/ngrok-1.x-sourccode-reading/</guid>
      <description>背景 ngrok是我第一次接触的 go 项目，也是我第一个完整阅读过源码的开源项目。一开始读代码我还是 go 语言零基础，只写过一点点 Web 后端 API，读了好</description>
    </item>
    
    <item>
      <title>Arch Linux 安装记录</title>
      <link>https://gobomb.github.io/post/install-arch-linux/</link>
      <pubDate>Sun, 09 Sep 2018 16:22:20 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/install-arch-linux/</guid>
      <description>旧笔记本之前是安装着 Windows 10 的，自从工作开始使用 rMBP 之后，就闲置着。我想不如重装成 Linux 系统，当作一个私人服务器用，也可以加深一下对操作系统的理解。很</description>
    </item>
    
    <item>
      <title>Cheat Sheet</title>
      <link>https://gobomb.github.io/post/cheatsheet/</link>
      <pubDate>Sun, 18 Mar 2018 14:02:01 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/cheatsheet/</guid>
      <description>Linux 安装 deb 文件： sudo dpkg -i [name].deb sudo apt-get install -f （修复依赖关系） linux 查找文件 find [path] -name &amp;quot;*.log&amp;quot; ubuntu（桌面版） 在终端输入xkill，鼠标变成x，点击 GUI 程序，可强制关</description>
    </item>
    
    <item>
      <title>编程语言的求值策略</title>
      <link>https://gobomb.github.io/post/evaluation_strategy/</link>
      <pubDate>Thu, 25 Jan 2018 17:09:03 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/evaluation_strategy/</guid>
      <description>在面试的时候遇到一个问题：“golang 的传参是按值传递还是按引用传递？”我第一反应是 go 在很多场景下传参和赋值都会发生内存的复制，同时记得 go</description>
    </item>
    
    <item>
      <title>2017 年终总结</title>
      <link>https://gobomb.github.io/post/2017-summarize/</link>
      <pubDate>Sun, 31 Dec 2017 20:48:34 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/2017-summarize/</guid>
      <description>一晃眼一年又过去了。再过半年我就要毕业了。 教训 今年找到第一份实习，学一门新的编程语言。实习的时候几乎是零基础，遇到什么问题就问上网查、问同事</description>
    </item>
    
    <item>
      <title>交叉编译 V2Ray</title>
      <link>https://gobomb.github.io/post/cross-complie-v2ray/</link>
      <pubDate>Fri, 29 Dec 2017 17:17:27 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/cross-complie-v2ray/</guid>
      <description>问题和背景 朋友想在路由器里跑 V2Ray，但官方 release 版本不能用，拜托我重新编译一份可执行文件。该路由器没有 FPU（Float Point Unit，浮点运算</description>
    </item>
    
    <item>
      <title>并发模型比较</title>
      <link>https://gobomb.github.io/post/high-concurrency-model/</link>
      <pubDate>Sat, 25 Nov 2017 22:13:27 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/high-concurrency-model/</guid>
      <description>Go 的特色之一就是 goroutine ，使得程序员进行并发编程更加方便，适合用来进行服务器编程。作为后端开发工程师，有必要了解并发编程面临的场景和常见的解决方案</description>
    </item>
    
    <item>
      <title>Golang 自带的单元测试</title>
      <link>https://gobomb.github.io/post/how-to-write-unit-testing-in-golang/</link>
      <pubDate>Mon, 06 Nov 2017 16:52:19 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/how-to-write-unit-testing-in-golang/</guid>
      <description>为什么要写单元测试 以前写程序的时候，一般不写测试，阅读开源代码遇到测试也都是跳过不读。调试的时候一半都是手动输入测试数据，在代码里打印 log 信息</description>
    </item>
    
    <item>
      <title>用 Hugo 和 GitHub Page 搭建博客</title>
      <link>https://gobomb.github.io/post/make-a-blog-by-hugo-and-github-page/</link>
      <pubDate>Tue, 31 Oct 2017 16:02:19 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/make-a-blog-by-hugo-and-github-page/</guid>
      <description>图省事，懒得花钱买域名和备案，就用 GitHub Page 来搭博客了。 hugo 是用 Golang 写的静态网站生成器。支持 Markdown 语法。 另一个用js写的同类工具jekyll 比较出名。 安装</description>
    </item>
    
  </channel>
</rss>