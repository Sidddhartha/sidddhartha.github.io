<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on Present Day, Present Time</title>
    <link>https://gobomb.github.io/tags/%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 测试 on Present Day, Present Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Nov 2017 16:52:19 +0800</lastBuildDate><atom:link href="https://gobomb.github.io/tags/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 自带的单元测试</title>
      <link>https://gobomb.github.io/post/how-to-write-unit-testing-in-golang/</link>
      <pubDate>Mon, 06 Nov 2017 16:52:19 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/how-to-write-unit-testing-in-golang/</guid>
      <description>为什么要写单元测试 以前写程序的时候，一般不写测试，阅读开源代码遇到测试也都是跳过不读。调试的时候一半都是手动输入测试数据，在代码里打印 log 信息。实际上重复性的工作很多，这一部分是可以用单元测试来做的。
另外，当项目比较大的时候，一般都是把项目分割成几个模块来写的。可以分别保证各个模块的正确性，最后再把各个项目组合起来。这时候也需要单元测试，增强可维护性。
人的记忆力和思考能力毕竟是有限的，并不一定能马上想到边界条件和 bug 可能出现的地方，当代码发生更改，边界条件可能就改变了，程序可能会跑不通，这时跑一下测试代码，可以更快发现问题。
测试保证程序是可运行的，运行结果是正确的，使问题及早暴露，便于问题的定位解决。而性能测试则关注程序在高并发的情况下的稳定性。
单元测试也可以方便读代码的人读懂，通过测试代码可以更快了解这个项目到底是干嘛的、该如何用。
怎么写单元测试 单元测试   go语言自己有一个轻量级的测试框架 testing和命令go test,可用来进行单元测试和性能测试。
  测试文件用 xxx_test.go命名，测试函数命名为TestXxx或Test_Xxx
  在终端中输入 go test，将对当前目录下的所有xxx_test.go文件进行编译并自动运行测试。
  测试某个文件，要带上被测试的原文件
   go test xxx.go xxx_test.go
  测试某个方法:go test -run=&#39;Test_Xxx&#39;
  go test -v 则输出通过的测试函数信息
  如对以下代码进行测试：
package test func Fibonacci(n int) int{ if n==1{ return 1 }else if n==0{ return 1 } return Fibonacci(n-1)+Fibonacci(n-2) } 测试代码为：</description>
    </item>
    
  </channel>
</rss>
