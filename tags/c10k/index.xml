<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C10k on Present Day, Present Time</title>
    <link>https://gobomb.github.io/tags/c10k/</link>
    <description>Recent content in C10k on Present Day, Present Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Nov 2017 22:13:27 +0800</lastBuildDate>
    
	<atom:link href="https://gobomb.github.io/tags/c10k/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>并发模型比较</title>
      <link>https://gobomb.github.io/post/high-concurrency-model/</link>
      <pubDate>Sat, 25 Nov 2017 22:13:27 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/high-concurrency-model/</guid>
      <description>Go 的特色之一就是 goroutine ，使得程序员进行并发编程更加方便，适合用来进行服务器编程。作为后端开发工程师，有必要了解并发编程面临的场景和常见的解决方案。一般情况下，是怎样做高并发的编程呢？有那些经典的模型呢？
一切始于 C10k C10k 就是 Client 10000，单机服务器同时服务1万个客户端。当然，现在的业务面临的是 C100k、C1000k 了。早期的服务器是基于进程/线程模型，每新来一个连接，就分配一个进程（线程）去处理这个连接。而进程（线程）在操作系统中，占有一定的资源。由于硬件的限制，进程（线程）的创建是有瓶颈的。另外进程（线程）的上下文切换也有成本：每次调度器调度线程，操作系统都要把线程的各种必要的信息，如程序计数器、堆栈、寄存器、状态等保存起来。
CPU 运算远远快于 I/O 操作。一般而言，常见的互联网应用（比如 Web）都是 I/O 密集型而非计算密集型。I/O 密集型是指，计算机 CPU 大量的时间都花在等待数据的输入输出，而不是计算。当 CPU 大部分时间都在等待 I/O 的时候，大部分计算资源都被浪费掉了。
显然，简单粗暴地开一个进程/线程去 handle 一个连接是不够的。为了达到高并发，应该好好考虑一下 I/O 策略。同样的硬件条件下，不同的设计产生的效果差别也会很大。在讨论几种 I/O 模型之前，先介绍一下同步/异步、阻塞/非阻塞的概念，以及操作系统的知识。
参考：
The C10K problem
同步/异步？阻塞/非阻塞？ 同步，是调用者主动去查看调用的状态，实时跟进，不可以同时做其他事情；异步，则是其他线程（可能是被调用者，也可能是一个帮你关注调用结果的实体）来通知调用者，调用者可以同时做其他事情，当调用结果更新，调用者会收到通知，再去处理调用结果。
主动轮询就是同步行为，调用者需要不断地去查看状态是否更新，在状态更新或结果返回之后，调用者才能跳出循环。而注册回调函数的方式，则是异步的。在 Web 应用里，前端可通过 jQuery AJAX 以异步的方式向服务器请求数据，在数据还没到达之前，AJAX 里的回调函数不会被执行，而调用者执行 AJAX 之后的代码，等到数据到达，才触发回调里的逻辑。
（感谢 @CuberL 在评论中指出: jQuery AJAX 也有同步和异步两种方式。可通过指定 async 的值来确定，默认情况下是异步方式。）
用一个生活中的例子来说明：快递员（调用者）送包裹，打电话叫你过来取（调用），然后他会等在那里，实时跟进包裹是否被你拿走（主动查看调用状态），只有你来拿了（调用状态更新）他才能离开，并记下此包裹被取（处理调用结果），继续送其他包裹，这就是同步方式。异步的情况则是，快递员打电话叫你过来取（调用），把包裹放在快递柜里（向另一个执行实体注册回调函数），然后离开，做其他事情。你从快递柜里取走包裹（调用状态更新），快递柜通知快递员或者你打电话告诉快递员：包裹已经被取走了（把状态更新的信息通知调用者），快递员可以停下其他事情，记录一下此包裹被取（执行回调函数，也即处理调用结果），继续做其他事情。
再总结一下，调用是同步方式还是异步方式，就是看对于调用的状态变更这个信息，调用者是主动获取的还是被动获取的。
阻塞和非阻塞的区别是调用后被调用者是否立即返回，调用者是不是在等待。 A 调完 B，就在调用处等待（阻塞），直到 B 方法返回才继续执行剩下的代码，这就是阻塞调用。而非阻塞是 A 方法调用 B 方法，B 方法立即返回，A 可以继续执行下面的代码，不会等在这里，不会被该调用阻塞。当某个方法被阻塞了，该方法所在的线程会被挂起，被操作系统的调度器放到阻塞队列，直到 A 等待的事件发生，才从阻塞态转到就绪态。</description>
    </item>
    
  </channel>
</rss>