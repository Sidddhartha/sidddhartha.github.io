<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录 on Present Day, Present Time</title>
    <link>https://gobomb.github.io/categories/%E8%AE%B0%E5%BD%95/</link>
    <description>Recent content in 记录 on Present Day, Present Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Sep 2018 16:22:20 +0800</lastBuildDate><atom:link href="https://gobomb.github.io/categories/%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arch Linux 安装记录</title>
      <link>https://gobomb.github.io/post/install-arch-linux/</link>
      <pubDate>Sun, 09 Sep 2018 16:22:20 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/install-arch-linux/</guid>
      <description>旧笔记本之前是安装着 Windows 10 的，自从工作开始使用 rMBP 之后，就闲置着。我想不如重装成 Linux 系统，当作一个私人服务器用，也可以加深一下对操作系统的理解。很早就听说滚动发行的 Arch Linux 的大名，就想趁机试一试。跟着官方 Wiki 走，大概花了6、7个小时才装好，中间也遇到了一些问题，但那时没有记录下来。用了一段时间后，/boot分区不小心被我覆盖了（估计是我使用 lvm 创建物理卷的时候把引导分区给格式化了），导致系统启动不了，一时半会也不会修。
放着有半个月，今天有空干脆格盘重装，再过一遍安装过程，把过程和问题记录下来，下一次遇到问题就不用再去 google。覆盖引导的问题，也是因为我没有把分区规划的信息留下来，后面自己也乱了。而且实际上90%的问题都会重复遇到，做好记录能极大提高效率。
Arch 官方 Wiki 做得真是很好，基本上遇到问题耐心读一读 Wiki 就能够解决。用来学习 Linux 相关知识也特别有用。
整个安装过程的大体步骤
 制作安装介质 从安装介质启动 分区和挂载磁盘 下载安装基本包到系统分区中 从安装介质切换到系统 完成基本的设置，并安装引导  分区和安装引导的部分是比较容易出错的，但大部分情况都可以从 Arch Wiki 中找到答案。
安装准备   下载 ArchLinux iso 文件
https://www.archlinux.org/download/
  制作安装介质
  在 Mac 下安装pv （用来查看dd的进度）
brew install pv
  找到 U 盘对应的设备
diskutil list
我这里是/dev/disk2
  查看 U 盘挂载的目录</description>
    </item>
    
    <item>
      <title>Cheat Sheet</title>
      <link>https://gobomb.github.io/post/cheatsheet/</link>
      <pubDate>Sun, 18 Mar 2018 14:02:01 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/cheatsheet/</guid>
      <description>Linux   安装 deb 文件：
sudo dpkg -i [name].deb
sudo apt-get install -f （修复依赖关系）
  linux 查找文件
find [path] -name &amp;quot;*.log&amp;quot; 
  ubuntu（桌面版） 在终端输入xkill，鼠标变成x，点击 GUI 程序，可强制关闭之
  调用自己定义的编辑器来编辑当前命令行:
ctrl-x ctrl-e
设置自己的默认编辑器：
export EDITOR=vi
  shell 脚本报错：... /bin/sh^M: bad interpreter: No such file or directory
解决：
vim [name.sh]
:set ff 查看文件格式，若看到输出fileformat=dos，可:set ff=unix修改为 unix 格式
  本地文件传输到远程机器
scp -P [port] /path/to/source [user]@[ip]:/path/to/target
  不挂断地运行命令</description>
    </item>
    
    <item>
      <title>交叉编译 V2Ray</title>
      <link>https://gobomb.github.io/post/cross-complie-v2ray/</link>
      <pubDate>Fri, 29 Dec 2017 17:17:27 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/cross-complie-v2ray/</guid>
      <description>问题和背景 朋友想在路由器里跑 V2Ray，但官方 release 版本不能用，拜托我重新编译一份可执行文件。该路由器没有 FPU（Float Point Unit，浮点运算单元，专用于浮点运算的处理器)，官方 Mips 版本并不支持软解浮点数运算，无法顺利运行。
环境  目标机器：OpenWRT mipsle（32位机器，小端序） 本地机器：CentOS amd64 golang1.9  解决过程 参考官方提供的编译步骤：
1. （安装 git 和 golang 环境的步骤略去） 2. 下载 V2Ray 源文件：`go get -u v2ray.com/core/...` 3. 下载 V2Ray 扩展包：`go get -u v2ray.com/ext/...` 4. 生成编译脚本： `go install v2ray.com/ext/tools/build/vbuild` 5. 编译 `V2Ray：$GOPATH/bin/vbuild` 6. V2Ray 程序及配置文件会被放在 `$GOPATH/bin/v2ray-XXX` 文件夹下（XXX 视平台不同而不同）   编译 V2Ray 至少要 go1.9 以上的版本 最新的 v2ray 源码是 go1.9 实现的，如果用 go1.8 进行编译会提示找不到“math/bits”标准库文件 unrecognized import path &amp;quot;math/bits&amp;quot; (import path does not begin with hostname) （https://github.</description>
    </item>
    
    <item>
      <title>Golang 自带的单元测试</title>
      <link>https://gobomb.github.io/post/how-to-write-unit-testing-in-golang/</link>
      <pubDate>Mon, 06 Nov 2017 16:52:19 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/how-to-write-unit-testing-in-golang/</guid>
      <description>为什么要写单元测试 以前写程序的时候，一般不写测试，阅读开源代码遇到测试也都是跳过不读。调试的时候一半都是手动输入测试数据，在代码里打印 log 信息。实际上重复性的工作很多，这一部分是可以用单元测试来做的。
另外，当项目比较大的时候，一般都是把项目分割成几个模块来写的。可以分别保证各个模块的正确性，最后再把各个项目组合起来。这时候也需要单元测试，增强可维护性。
人的记忆力和思考能力毕竟是有限的，并不一定能马上想到边界条件和 bug 可能出现的地方，当代码发生更改，边界条件可能就改变了，程序可能会跑不通，这时跑一下测试代码，可以更快发现问题。
测试保证程序是可运行的，运行结果是正确的，使问题及早暴露，便于问题的定位解决。而性能测试则关注程序在高并发的情况下的稳定性。
单元测试也可以方便读代码的人读懂，通过测试代码可以更快了解这个项目到底是干嘛的、该如何用。
怎么写单元测试 单元测试   go语言自己有一个轻量级的测试框架 testing和命令go test,可用来进行单元测试和性能测试。
  测试文件用 xxx_test.go命名，测试函数命名为TestXxx或Test_Xxx
  在终端中输入 go test，将对当前目录下的所有xxx_test.go文件进行编译并自动运行测试。
  测试某个文件，要带上被测试的原文件
   go test xxx.go xxx_test.go
  测试某个方法:go test -run=&#39;Test_Xxx&#39;
  go test -v 则输出通过的测试函数信息
  如对以下代码进行测试：
package test func Fibonacci(n int) int{ if n==1{ return 1 }else if n==0{ return 1 } return Fibonacci(n-1)+Fibonacci(n-2) } 测试代码为：</description>
    </item>
    
    <item>
      <title>用 Hugo 和 GitHub Page 搭建博客</title>
      <link>https://gobomb.github.io/post/make-a-blog-by-hugo-and-github-page/</link>
      <pubDate>Tue, 31 Oct 2017 16:02:19 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/make-a-blog-by-hugo-and-github-page/</guid>
      <description>图省事，懒得花钱买域名和备案，就用 GitHub Page 来搭博客了。
hugo 是用 Golang 写的静态网站生成器。支持 Markdown 语法。 另一个用js写的同类工具jekyll 比较出名。安装和使用Hugo  如果有 Go 环境，直接在终端输入：  go get -v github.com/spf13/hugo hugo new site /path/to/site   path/to/site是本地站点目录
  创建 about 页面：
  hugo new about.md  皮肤我用的是 rockrock：  cd themes git clone https://github.com/chingli/rockrock 在本地运行   在站点根目录下运行： hugo server --theme=rockrock --buildDrafts   在浏览器访问： http://localhost:1313   这里修改 Markdown 文件可以动态更新，很方便。   在 GitHub 上部署 1 在 GitHub 建一个 Repository，命名为 sidddhartha.</description>
    </item>
    
  </channel>
</rss>
