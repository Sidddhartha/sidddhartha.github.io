<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>总结 on Present Day, Present Time</title>
    <link>https://gobomb.github.io/categories/%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 总结 on Present Day, Present Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jan 2019 03:26:33 +0800</lastBuildDate><atom:link href="https://gobomb.github.io/categories/%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2018 年终总结</title>
      <link>https://gobomb.github.io/post/2018-summarize/</link>
      <pubDate>Wed, 02 Jan 2019 03:26:33 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/2018-summarize/</guid>
      <description>2018 过去了，年终总结我拖到2019才写。
这一年，正式从校园进入职场。
18 年读的书特别少，小说基本不怎么读了，实在没有读小说的心境。现在能想起来的就是毛姆的《面纱》，读完不过瘾还去看了改编的电影。毛姆实在是一位很合我口味的小说家了，到目前为止他的书还没有让我失望过。
看了几本讲互联网企业和开源历史的书：吴军的《浪潮之巅》、Eric S. Raymond的《大教堂与集市》，让刚刚进入行业的我对整个 IT 产业的玩法有了比较宏观的认识。之前对 IT 的了解，仅仅停留砸在 To C、做应用、做网站的维度，实际上是比较狭隘的。
《浪潮之巅》把硅谷企业的创业史都过了一遍，勾勒出时代浪潮的发展轨迹，对其中的企业给出了一些盖棺定论的评价，这对我的知识体系是个很有益的补充。也让我大致了解了一下资本的游戏规则：股票期权是怎么运作的，金融危机的逻辑是什么，风险投资、投资银行是什么……而 18 年恰逢经济形势不好，与书中的内容对照，让人唏嘘。
《大教堂与集市》是介绍开源（open source）运动很著名的书了。慕名已久直到最近才读。对了解什么是开源，什么是黑客，什么是好的自由软件的开发模式很有帮助。Eric S. Raymond（ESR）算是开源的推广者，在这几十年间，参与开源、也见证开源概念的形成与发展。这本书也有对软件工程方法和组织架构的大量探讨。这本书出版于1999年，那时候还不甚确定的事情，在20年后的今天得到了不少印证。跟很多事情的发展一样，大厦不是一日建成的，我们认为理所应当的事情，在最开始并不是理所应当的。所以倒回去看一些前辈当时的努力和思考，很有必要。万一轮到我们这一辈去创造历史，也不是无前例可循。
实际上开源在不同的年代，在不同的人那里，有着不同的意义，比如在大胡子 Richard Stallman （RMS）和他倡导的自由软件运动（free software movement）那里，”开源“是激进且反商业的；相较之下 ESR 和 Linus Torvalds 就不会很排斥商业；而对像 Red Hat （近期被 IBM 收购也是一件值得关注的事了）这种靠开源成功上市的公司，开源是一门生意（国内的也有采用开源模式创业的公司 PingCAP）。所以我们可以看到现在有各种各样的开源协议，可以说每种协议背后都有不同的价值观和商业考虑。实际上开源在今天已经是主流了，连微软这种传统上“邪恶”的闭源公司，都已经在开源贡献列表里排得上名号了，甚至收购了开源社区 Github。开源在未来会有怎样的发展，我很期待。
Linux Kernel 是开源软件里必须提到的成果了，现在能接触到的（Web）服务器上面，跑的都是 Linux。但实际上 Linux 的全称应该是 GNU/Linux 才对，GNU（GNU&amp;rsquo;s Not Unix!） 本来是自由软件基金会想要搞出来的完全自由的操作系统，他们开发了一堆与 Unix 兼容的程序，但是他们的内核 Hurd 没有成功，反而后来居上的 Linux Kernel 加上 GNU 那些自由软件流行起来。Linux Kernel 与 Hurd 之间的技术差异（宏内核和微内核），也有很多好玩的技术细节。（这段历史我是看了老板推荐的两部纪录片《The Code》《Revolution OS》了解到的。也算补了一课。）
我对开源产生兴趣，一个原因是我很认可自由、创造性的价值，另一方面，我也关心技术如何影响社会，如何成为一种“运动”。技术可以是专制、贬损人类的工具，也可以用来增进人类福利与自由，而这不是单纯的技术问题了。开源从直觉上讲，似乎是和逐利的商业互相矛盾的，也不符合人自私的天性，但实际上它激发了人的创造力，使得软件开发离不了开源。资本社会，大可见行业壁垒、信息不对称、知识产权垄断，互联网在走向封闭。我觉得开源这样一种分布式的、扁平的、自由的模式，是有希望成为我们与资本、权力抗衡的武器的。
我很喜欢这本书附录的一篇文章：《如何成为一名黑客》，读完十分兴奋，相见恨晚，推荐给了很多朋友。读完意犹未尽，我还又去重读了一遍 Paul Graham 的《黑客与画家》。这算是看书的乐趣之一了：原来自己思考和选择的结论，那些有经验的写作者也是这么认为的，我能从他们那里得到了印证，我并不是孤独的。而我想错的部分，也可以得到修正。我在亲身试错之前，能够“提前”得到反馈。我以后的行动，也可以建立在前人的真知灼见上。</description>
    </item>
    
    <item>
      <title>2017 年终总结</title>
      <link>https://gobomb.github.io/post/2017-summarize/</link>
      <pubDate>Sun, 31 Dec 2017 20:48:34 +0800</pubDate>
      
      <guid>https://gobomb.github.io/post/2017-summarize/</guid>
      <description>一晃眼一年又过去了。再过半年我就要毕业了。
教训 今年找到第一份实习，学一门新的编程语言。实习的时候几乎是零基础，遇到什么问题就问上网查、问同事，把事情勉强做成。在这个过程中，越发觉得知识要成体系。以前我总以为，记忆性的东西不必死记硬背，比如 Linux 某个命令的用法，某个网络协议的细节等，知道去哪里寻找答案，能够解决当前的问题，然后做好记录就够了。但问题在于，这样每次临时去搜索，其实是很耗费时间的。而且也不一定保证能够找到想要的信息。试图走捷径，不踏踏实实理解和记忆，最后其实得不偿失。
今年看的一本书《构建之法》提到一个观点：“技能的反面”是“解决（低层次）问题”，读到这一章的时候，真是醍醐灌顶。原来我一直在解决“低层次”问题。
低层次问题理应烂熟于心，才能把主要时间精力集中在高层次问题上。把技能磨练到精通的程度，才能够看得更远。正确的做法是体系化地学习技能或知识，该训练的训练扎实，把招式内化为本能反应。轻视招式是很愚蠢的。我在这里吃了大亏，面试的时候好几次被问起：作为计算机科班学生，为什么连基本的数据结构、数据库都那么不熟练？感觉把母校的脸丢光了。
关于面试 秋招并不顺利，除了基础不够扎实外，自己也没有拿得出手的项目。另外面试经验不足也是原因，很容易紧张，没有注意表达方式。有时候即使知道对方需要的答案，但因为自己没有表达好，反而会成为劣势。STAR 法则——情境（situation）、任务（task）、行动（action）、结果（result）——还是很有道理的。要有意识地训练自己的思维和表达。
我不太适应电话交流。书面表达和当面交流的经验比较多。书面表达我可以反复斟酌修改，而当面交流，可以得到语言之外的反馈，比如肢体语言、眼神，我很依赖这些反应。在电话里，只有唯一的媒介，声音，而且必须立即给出反应，这让我很有压力。我第一次电话面试时，大脑卡壳，陷入长时间的沉默，十分尴尬。而这沉默也是无效的，因为我没有办法让自己思考，只是浪费双方的时间。
朋友建议我电话面试的时候可以准备纸笔，在面试的过程中写写画画，整理一下思路，搭一个大致的框架。我觉得有道理，纸就像一个高速缓存，大脑的缓存不够，就再建立一个二级缓存，加速数据传输。动起手来先把知识从大脑的长期记忆区（硬盘）取出来，提高命中率。面试的目的也是看你的长期记忆里有没有他需要的能力，我所做的就是把能力有效地展现出来。要尽量往消除信息不对称的方向走。这也有助于把注意力从“声音/沉默”转移到问题本身。
重点就是要表达出来，把自己懂的都说清楚，说对说错都没有关系，但如果不说出来对方永远不知道你的水平如何，也就没有给 offer 的充分理由了。
这也是为何技术招聘要看 Github 页面和技术博客，以及注重白板编程的原因。大三选修了一门创新短课——区块链和数字货币。有个工作量证明(Proof Of Work，POW)的概念，比特币的 POW 就是暴力计算散列函数，矿工投入必要的计算资源去碰撞出某个值，得到这个值就证明了矿工付出了相应的“工作量”，有资格得到奖励。这是个很巧妙的设计，从数学上保证了人很难作弊，而无需一个第三方和中心化的机构来做出担保。面试需要的也是“工作量证明”，面试者需要证明自己有相应的能力，开源项目、博客和白板编程都是过往工作量的证明，虽然这种证明的效力比不上比特币那种数学的方式，但道理是类似的。开源项目、博客和白板编程，都是看得见的产出。而产出会倒逼程序员主动去学习和进步。
后端：总结和计划 开始确定自己要走后端路线。比起前两年，对如何学习这回事开始有一点谱。似乎醒悟得有点晚，但俗话说“种一颗树最好的时机是十年前，其次是现在”，只要开始行动就不算晚。
我是今年才明确自己的方向的。上半年实习，开始学 Go 语言，接触 Web 开发，学用框架，看懂开源项目 ngrok 的大致逻辑。下半年都在复习基础知识，计算机网络、操作系统，进一步深入 Go 语言。十月份开始写博客，在 Github 上试着开发和完善一个项目。
个人技术栈不管广度还是深度，都不够。但是急不来，还是得踏踏实实写代码，多总结。总结很重要，总结是个系统化的过程，把碎片化的经验组织起来，纳入自身的工具箱。能达到可复用的效果。这跟写代码是一个道理，做到高内聚低耦合，功能模块做好拆分。遇到具体的情景和需求，能够快速高效地调用。
接下来的打算是，做毕业设计，更新博客，补基础（特别是数据结构和数据库），继续面试。
其他 实习时交到了新的朋友，参与了个外包项目，赚了点零花钱。
准备秋招的时候，和舍友互相学习，讨论问题，收获也很大。
大学待过的两个社团——《深大青年》杂志社、学子天地——都被校团委解散重组了，很可惜。迷茫的时候深青同仁给了我不少支持，学子的技术大佬帮我看了简历，给了我很中肯的建议。如果没有社团，大学生活可能会完全不一样。
给野人公众号写了几篇读书笔记，帮野人杂志第三期做了校对。
看了几本技术书，都是囫囵吞枣地过一遍，读得不是很仔细……有点消化不良。怎么看技术书比较高效，我还在摸索中。</description>
    </item>
    
  </channel>
</rss>
